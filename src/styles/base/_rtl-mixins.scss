// RTL-SASS

$rtl: false !default;

// Swap property values when in rtl
// In:  0 5px 8px 12px
// Out: 0 12px 8px 5px (in rtl)
@function swap-left-right($values) {
	@if $rtl and length($values) == 5 {
		@return nth($values, 1) nth($values, 4) nth($values, 3) nth($values, 2)
			nth($values, 5);
	} @else if $rtl and length($values) == 4 {
		@return nth($values, 1) nth($values, 4) nth($values, 3) nth($values, 2);
	} @else {
		@return $values;
	}
}

@mixin lr-swap($value, $property, $origin: left) {
	@if $origin == left {
		@if $rtl {
			border-right-#{$property}: $value;
		} @else {
			border-left-#{$property}: $value;
		}
	} @else {
		@if $rtl {
			border-left-#{$property}: $value;
		} @else {
			border-right-#{$property}: $value;
		}
	}
}
// For selectors which have 4 values (e.g. padding, margin)
@mixin lrswap($property, $values) {
	@if length($values) >= 4 {
		#{$property}: swap-left-right($values);
	} @else {
		#{$property}: $values;
	}
}
// ==========
// = Border =
// ==========
@mixin borderlr($value, $origin: left) {
	@if $origin == left {
		@if $rtl {
			border-right: $value;
		} @else {
			border-left: $value;
		}
	} @else {
		@if $rtl {
			border-left: $value;
		} @else {
			border-right: $value;
		}
	}
}
//Shorthands
@mixin border-width($values) {
	@include lrswap(border-width, $values);
}
@mixin border-left($value) {
	@include borderlr($value, left);
}
@mixin border-right($value) {
	@include borderlr($value, right);
}
@mixin border-right-color($value) {
	@include lr-swap($value, color, right);
}
@mixin border-left-color($value) {
	@include lr-swap($value, color, left);
}
@mixin border-right-width($value) {
	@include lr-swap($value, width, right);
}
@mixin border-left-width($value) {
	@include lr-swap($value, width, left);
}
@mixin border-right-style($value) {
	@include lr-swap($value, style, right);
}
@mixin border-left-style($value) {
	@include lr-swap($value, style, left);
}
// ==========
// = Radius =
// ==========
@mixin lr-radius-swap($value, $origin: left) {
	@if $origin == left {
		@if $rtl {
			border-top-right-radius: $value;
			border-bottom-right-radius: $value;
		} @else {
			border-top-left-radius: $value;
			border-bottom-left-radius: $value;
		}
	} @else {
		@if $rtl {
			border-top-left-radius: $value;
			border-bottom-left-radius: $value;
		} @else {
			border-top-right-radius: $value;
			border-bottom-right-radius: $value;
		}
	}
}

@mixin border-left-radius($value) {
	@include lr-radius-swap($value, left);
}
@mixin border-right-radius($value) {
	@include lr-radius-swap($value, right);
}

@mixin border-radius($values) {
	@if length($values) == 4 {
		//border-radius: swap-left-right($values);
		@if $rtl {
			border-radius: nth($values, 2)
				nth($values, 1)
				nth($values, 4)
				nth($values, 3);
		} @else {
			border-radius: $values;
		}
	} @else {
		border-radius: $values;
	}
}
@mixin border-bottom-left-radius($value) {
	@if $rtl {
		border-bottom-right-radius: $value;
	} @else {
		border-bottom-left-radius: $value;
	}
}
@mixin border-bottom-right-radius($value) {
	@if $rtl {
		border-bottom-left-radius: $value;
	} @else {
		border-bottom-right-radius: $value;
	}
}
@mixin border-top-left-radius($value) {
	@if $rtl {
		border-top-right-radius: $value;
	} @else {
		border-top-left-radius: $value;
	}
}
@mixin border-top-right-radius($value) {
	@if $rtl {
		border-top-left-radius: $value;
	} @else {
		border-top-right-radius: $value;
	}
}

// ==========
// = Margin =
// ==========
@mixin marginlr($value, $origin: left) {
	@if $origin == left {
		@if $rtl {
			margin-right: $value;
		} @else {
			margin-left: $value;
		}
	} @else {
		@if $rtl {
			margin-left: $value;
		} @else {
			margin-right: $value;
		}
	}
}
// Shorthands
@mixin margin($values) {
	@include lrswap(margin, $values);
}
@mixin margin-left($value) {
	@include marginlr($value, left);
}
@mixin margin-right($value) {
	@include marginlr($value, right);
}

// ===========
// = Padding =
// ===========

@mixin paddinglr($value, $origin: left) {
	@if $origin == left {
		@if $rtl {
			padding-right: $value;
		} @else {
			padding-left: $value;
		}
	} @else {
		@if $rtl {
			padding-left: $value;
		} @else {
			padding-right: $value;
		}
	}
}
// Shorthands
@mixin padding($values) {
	@include lrswap(padding, $values);
}
@mixin padding-left($value) {
	@include paddinglr($value, left);
}
@mixin padding-right($value) {
	@include paddinglr($value, right);
}

// =========
// = Float =
// =========

@mixin float($origin: left) {
	@if $origin == left {
		@if $rtl {
			float: right;
		} @else {
			float: left;
		}
	}
	@else if $origin == right {
		@if $rtl {
			float: left;
		} @else {
			float: right;
		}
	} @else {
		float: $origin;
	}
}

// =============
// =  Position =
// =============
@mixin position-h($value, $origin: left) {
	@if $origin == left {
		@if $rtl {
			right: $value;
		} @else {
			left: $value;
		}
	} @else {
		@if $rtl {
			left: $value;
		} @else {
			right: $value;
		}
	}
}

@mixin left($value) {
	@include position-h($value, left);
}
@mixin right($value) {
	@include position-h($value, right);
}

// =================================
// =  Text-align with important =
// =================================

@mixin text-align($origin: left) {
	@if (length($origin) == 2) {
		@if nth($origin, 1) == left {
			@if $rtl {
				text-align: right !important;
			} @else {
				text-align: left !important;
			}
		}
		@else if nth($origin, 1) == right {
			@if $rtl {
				text-align: left !important;
			} @else {
				text-align: right !important;
			}
		} @else {
			text-align: $origin;
		}
	} @else {
		@if $origin == left {
			@if $rtl {
				text-align: right;
			} @else {
				text-align: left;
			}
		}
		@else if $origin == right {
			@if $rtl {
				text-align: left;
			} @else {
				text-align: right;
			}
		} @else {
			text-align: $origin;
		}
	}
}

// ===========
// =  Others =
// ===========

@mixin clear($origin: left) {
	@if $origin == left {
		@if $rtl {
			clear: right;
		} @else {
			clear: left;
		}
	}
	@else if $origin == right {
		@if $rtl {
			clear: left;
		} @else {
			clear: right;
		}
	} @else {
		clear: $origin;
	}
}

@mixin text-indent($value) {
	@if $rtl {
		text-indent: $value * -1;
	} @else {
		text-indent: $value;
	}
}

@mixin cursor($value) {
	@if $rtl {
		@if $value == ne-resize {
			cursor: nw-resize;
		} @else if $value == e-resize {
			cursor: w-resize;
		} @else if $value == se-resize {
			cursor: sw-resize;
		} @else if $value == sw-resize {
			cursor: se-resize;
		} @else if $value == w-resize {
			cursor: e-resize;
		} @else if $value == nw-resize {
			cursor: ne-resize;
		}
	} @else {
		cursor: $value;
	}
}

@mixin transform_rotate($value) {
	@if $rtl {
		@if $value == rotate(90deg) {
			transform: rotate(270deg);
		} @else if $value == rotate(270deg) {
			transform: rotate(90deg);
		}
	} @else {
		transform: $value;
	}
}

@mixin transform_origin($values) {
	@if $rtl {
		@if nth($values, 1) == left {
			transform-origin: right nth($values, 2) nth($values, 3);
		} @else if nth($values, 1) == right {
			transform-origin: left nth($values, 2) nth($values, 3);
		}
	} @else {
		transform-origin: $values;
	}
}

@mixin direction {
	@if $rtl {
		direction: rtl;
	} @else {
		direction: ltr;
	}
}

@mixin transition_margin($value1, $value2) {
	@if $rtl {
		@if nth($value1, 1) == margin-left {
			@include transition(
				margin-right nth($value1, 2) nth($value1, 3),
				$value2
			);
		} @else if nth($value1, 1) == margin-right {
			@include transition(margin-left nth($value1, 2) nth($value1, 3), $value2);
		}
	} @else {
		transition: $value1, $value2;
	}
}

@mixin translateX($value) {
	@if $rtl {
		@include transform(translateX($value * -1));
	} @else {
		@include transform(translateX($value));
	}
}

@mixin translate3d($value1, $value2, $value3) {
	@if $rtl {
		@include transform(translate3d(($value1 * -1), $value2, $value3));
	} @else {
		@include transform(translate3d($value1, $value2, $value3));
	}
}
